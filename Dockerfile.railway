# Optimized Dockerfile for Railway deployment
FROM node:20-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./
RUN npm ci

# Copy source code
COPY . .

# Build the application
RUN npm run build

# Production stage - optimized for Railway
FROM node:20-alpine

WORKDIR /app

# Install system dependencies efficiently
RUN apk add --no-cache curl bash git ca-certificates \
    && update-ca-certificates

# Install scanning tools in parallel for faster builds
RUN echo "Installing security scanning tools..." && \
    # Install Syft
    curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin & \
    # Install Grype  
    curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin & \
    # Install Go for OSV-Scanner
    apk add --no-cache go & \
    wait && \
    # Install OSV-Scanner
    go install github.com/google/osv-scanner/cmd/osv-scanner@latest && \
    # Clean up Go cache to reduce image size
    rm -rf /root/go/pkg /root/.cache

# Add OSV-Scanner to PATH
ENV PATH="/root/go/bin:${PATH}"

# Copy package files and install production dependencies
COPY package*.json ./
RUN npm ci --only=production && \
    npm cache clean --force

# Copy built application from builder stage
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/public ./public
COPY --from=builder /app/next.config.js ./
COPY --from=builder /app/middleware.ts ./
COPY --from=builder /app/types ./types

# Create temp directory for analysis
RUN mkdir -p /app/temp && \
    chmod 777 /app/temp

# Railway will set PORT automatically
ENV NODE_ENV=production

# Health check for Railway
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:' + (process.env.PORT || 3000) + '/', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"

# Railway expects the app to bind to 0.0.0.0
EXPOSE $PORT

# Start the application
CMD ["npm", "start"]