interface VulnerabilityResultsProps {
  vulnerabilities: {
    grype?: any
    osv?: any
  }
  image: string
  sessionId: string | null
}

export default function VulnerabilityResults({ vulnerabilities, image, sessionId }: VulnerabilityResultsProps) {
  const getSeverityColor = (severity: string) => {
    switch (severity?.toLowerCase()) {
      case 'critical': return 'text-red-500 bg-red-500/10 border-red-500/30'
      case 'high': return 'text-orange-500 bg-orange-500/10 border-orange-500/30'
      case 'medium': return 'text-yellow-500 bg-yellow-500/10 border-yellow-500/30'
      case 'low': return 'text-blue-500 bg-blue-500/10 border-blue-500/30'
      default: return 'text-gray-500 bg-gray-500/10 border-gray-500/30'
    }
  }

  const handleDownloadReport = async (scanner: 'grype' | 'osv') => {
    try {
      const response = await fetch(`/api/download/vulnerability-report`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          image, 
          scanner,
          sessionId 
        }),
      })

      if (!response.ok) throw new Error('Download failed')

      const blob = await response.blob()
      const url = window.URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `${scanner}-report-${image.replace(/[/:]/g, '-')}.json`
      document.body.appendChild(a)
      a.click()
      window.URL.revokeObjectURL(url)
      document.body.removeChild(a)
    } catch (error) {
      console.error('Download error:', error)
    }
  }

  const renderScannerResults = (scannerName: string, data: any) => {
    if (!data) {
      return (
        <div className="text-center py-8 text-gray-400">
          <p>No scan results available</p>
        </div>
      )
    }

    const summary = data.summary || {}
    const vulns = data.vulnerabilities || []

    return (
      <div className="space-y-4">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold text-white">{scannerName}</h3>
          <button
            onClick={() => handleDownloadReport(scannerName.toLowerCase() as 'grype' | 'osv')}
            className="px-4 py-2 bg-primary/20 hover:bg-primary/30 text-primary rounded-lg transition flex items-center space-x-2"
          >
            <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clipRule="evenodd" />
            </svg>
            <span>Download Report</span>
          </button>
        </div>

        <div className="grid grid-cols-2 md:grid-cols-5 gap-3">
          {['critical', 'high', 'medium', 'low', 'unknown'].map((severity) => (
            <div
              key={severity}
              className={`p-3 rounded-lg border ${getSeverityColor(severity)}`}
            >
              <p className="text-xs uppercase font-medium">{severity}</p>
              <p className="text-2xl font-bold mt-1">
                {summary[severity] || 0}
              </p>
            </div>
          ))}
        </div>

        {vulns.length > 0 && (
          <div className="mt-6 space-y-2 max-h-96 overflow-y-auto">
            <h4 className="text-sm font-medium text-gray-300 sticky top-0 bg-surface py-2">
              Vulnerability Details ({vulns.length} total)
            </h4>
            {vulns.slice(0, 20).map((vuln: any, index: number) => (
              <div
                key={index}
                className="p-3 bg-surface-light rounded-lg border border-white/5 hover:border-white/10 transition"
              >
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center space-x-2">
                      <span className="font-mono text-sm text-primary">
                        {vuln.id || vuln.cve || 'Unknown'}
                      </span>
                      <span className={`px-2 py-0.5 text-xs rounded-full ${getSeverityColor(vuln.severity)}`}>
                        {vuln.severity}
                      </span>
                    </div>
                    <p className="text-xs text-gray-400 mt-1">
                      Package: {vuln.package || 'Unknown'}
                      {vuln.version && ` (${vuln.version})`}
                    </p>
                    {vuln.fixedVersion && (
                      <p className="text-xs text-green-400 mt-1">
                        Fix available: {vuln.fixedVersion}
                      </p>
                    )}
                  </div>
                </div>
              </div>
            ))}
            {vulns.length > 20 && (
              <p className="text-center text-sm text-gray-400 py-2">
                Showing 20 of {vulns.length} vulnerabilities
              </p>
            )}
          </div>
        )}
      </div>
    )
  }

  return (
    <div className="space-y-8">
      {!vulnerabilities.grype && !vulnerabilities.osv ? (
        <div className="text-center py-12">
          <svg className="w-16 h-16 mx-auto text-gray-600 mb-4" fill="currentColor" viewBox="0 0 20 20">
            <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
          </svg>
          <p className="text-gray-400">No vulnerability scan results available</p>
          <p className="text-sm text-gray-500 mt-2">Run a vulnerability scan to see results</p>
        </div>
      ) : (
        <>
          <div className="glass-morphism rounded-lg p-6">
            {renderScannerResults('Grype', vulnerabilities.grype)}
          </div>
          
          <div className="glass-morphism rounded-lg p-6">
            {renderScannerResults('OSV Scanner', vulnerabilities.osv)}
          </div>
        </>
      )}
    </div>
  )
}